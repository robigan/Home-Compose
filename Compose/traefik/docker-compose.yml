version: "3.9"

services:
  reverse-proxy:
    image: traefik:v3.2 # Use the traefik image
    networks:
      - default # Defualt network that Traefik can use for update checking
      - proxy # Proxy network
    ports:
      - 443:443 # Websecure port
      - 80:80 # Web port
    restart: unless-stopped
    command:
      - "--global.sendanonymoususage=false" # Disable anonymous usage data
      - "--entrypoints.web.address=:80" # Provide an entrypoint for HTTP traffic
      # Doesn't redirect by default to HTTPS scheme for services that legitimately need HTTP
      - "--entrypoints.websecure.address=:443" # Provide a secure entrypoint for HTTPS traffic
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure" # Always redirect the web entrypoint to websecure entrypoint
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https" # Upgrade the scheme to https
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true" # Use a permanent redirect
      - "--api.insecure=false" # Disable insecure API
      - "--api.dashboard=true" # But do enable the dashboard
      - "--providers.docker=true" # Enable docker provider
      - "--providers.docker.exposedbydefault=false" # Disable exposing services by default
      - "--providers.docker.network=proxy" # Set the default docker network to proxy
      - "--accesslog=${ACCESS_LOG:-false}" # Access log definition, values are 'true' or 'false' 
      - "--log.level=${LOG_LEVEL:-ERROR}" # Log level definition, see https://doc.traefik.io/traefik/observability/logs/#level
      - "--experimental.plugins.cloudflarewarp.modulename=github.com/BetterCorp/cloudflarewarp" # Add cloudflarewarp plugin
      - "--experimental.plugins.cloudflarewarp.version=v1.3.3" # Specify version(s)
      - "--experimental.plugins.bouncer.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin" # Add crowdsec bouncer plugin
      - "--experimental.plugins.bouncer.version=v1.3.0" # Specify version(s)
      # Configure Cloudflare DNS Challenge
      - "--experimental.plugins.traefik-oidc-auth.modulename=github.com/sevensolutions/traefik-oidc-auth" # Add OIDC auth plugin
      - "--experimental.plugins.traefik-oidc-auth.version=v0.16.0" # Specify version(s)
      - "--certificatesresolvers.cfresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.cfresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cfresolver.acme.email=robigan@robigan.com"
      - "--certificatesresolvers.cfresolver.acme.storage=/acme/acme.json"
      - "--metrics.otlp=${ENABLE_OTLP:-false}" # Enable OpenTelemetry metrics
      - "--metrics.otlp.pushInterval=60s" # Set the push interval for OpenTelemetry metrics
      - "--metrics.otlp.grpc=true" # Enable gRPC for OpenTelemetry metrics
      - "--metrics.otlp.grpc.endpoint=${OTLP_HOST:-host.docker.internal:4317}" # Set the gRPC endpoint for OpenTelemetry metrics
      - "--metrics.otlp.grpc.insecure=${OTLP_INSECURE:-false}" # Enable insecure gRPC for OpenTelemetry metrics because we are sending to host endpoint
      - "--tracing.otlp=${ENABLE_OTLP:-false}" # Enable OpenTelemetry tracing
      - "--tracing.otlp.grpc=true" # Enable gRPC for OpenTelemetry tracing
      - "--tracing.otlp.grpc.endpoint=${OTLP_HOST:-host.docker.internal:4317}" # Set the gRPC endpoint for OpenTelemetry metrics
      - "--tracing.otlp.grpc.insecure=${OTLP_INSECURE:-false}" # Enable insecure gRPC for OpenTelemetry tracing because we are sending to host endpoint
    labels:
      # Enable traefik labels for this definition
      traefik.enable: true
      # Setup router, see https://community.traefik.io/t/serving-traefiks-internal-dashboard-behind-traefik-itself/3457/7
      traefik.http.routers.traefik.entrypoints: websecure # Setup an http router to the dashboard
      traefik.http.routers.traefik.rule: Host(`${PRIVATE_HOST:?UNSET_PRIVATE_HOST_ERROR}`) # Use this host
      traefik.http.routers.traefik.tls: true # Enable TLS for this router
      traefik.http.routers.traefik.tls.certresolver: cfresolver # Use the Let's Encrypt Cert
      traefik.http.routers.traefik.service: api@internal # Route to api service
      # Define cloudflare middleware
      traefik.http.middlewares.cloudflare.plugin.cloudflarewarp.disableDefault: false # Set the disable default to false. Creates the cloudflarewarp middleware and uses IPs listed at cloudflare.com
      traefik.http.middlewares.private-to-public-redirect.redirectregex.regex: "^https:\\/\\/([a-z0-9]+)\\.home\\.robigan\\.com\\/(.*)" # Redirect regex for private to public
      traefik.http.middlewares.private-to-public-redirect.redirectregex.replacement: https://$${1}.robigan.com/$${2} # Replacement for the redirect
      traefik.http.middlewares.private-to-public-redirect.redirectregex.permanent: true # Use a permanent redirect
      # Define crowdsec bouncer middleware
      traefik.http.middlewares.crowdsec.plugin.bouncer.enabled: true # Enable the bouncer middleware
      traefik.http.middlewares.crowdsec.plugin.bouncer.loglevel: ${LOG_LEVEL_CROWDSEC:-INFO} # Log level for the bouncer, expected values are INFO, DEBUG
      traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecMode: stream # Set the crowdsec mode to live, caches ban list and only updates every 60s
      traefik.http.middlewares.crowdsec.plugin.bouncer.updateIntervalSeconds: ${CROWDSEC_UPDATE_INTERVAL:-60} # Set the update interval for the crowdsec ban list, only relevant in stream mode
      traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiKey: ${CROWDSEC_KEY:?UNSET_CROWDSEC_KEY_ERROR} # Set the crowdsec API key
      traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiHost: ${CROWDSEC_HOST:-host.docker.internal:8080} # Set the crowdsec address
      traefik.http.middlewares.crowdsec.plugin.bouncer.forwardedHeadersTrustedIPs: 173.245.48.0/20, 103.21.244.0/22, 103.22.200.0/22, 103.31.4.0/22, 141.101.64.0/18, 108.162.192.0/18, 190.93.240.0/20, 188.114.96.0/20, 197.234.240.0/22, 198.41.128.0/17, 162.158.0.0/15, 104.16.0.0/13, 104.24.0.0/14, 172.64.0.0/13, 131.0.72.0/22, 2400:cb00::/32, 2606:4700::/32, 2803:f800::/32, 2405:b500::/32, 2405:8100::/32, 2a06:98c0::/29, 2c0f:f248::/32 # Cloudflare IP addresses
      traefik.http.middlewares.crowdsec.plugin.bouncer.redisCacheEnabled: true # Enable the redis cache
      traefik.http.middlewares.crowdsec.plugin.bouncer.redisCacheHost: "cache:6379" # Set the redis cache host
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaProvider: ${CAPTCHA_PROVIDER:-turnstile} # Set the captcha provider
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaSiteKey: ${CAPTCHA_SITE_KEY:?UNSET_CAPTCHA_SITE_KEY_ERROR} # Set the captcha site key
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaSecretKey: ${CAPTCHA_SECRET_KEY:?UNSET_CAPTCHA_SECRET_KEY_ERROR} # Set the captcha secret key
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaHTMLFilePath: "/captcha.html" # Set the captcha HTML file path, this is not necessarily needed as it is the default
      traefik.http.middlewares.crowdsec.plugin.bouncer.banHTMLFilePath: "/ban.html" # Set the ban HTML file path, this IS needed as the default is blank to disable ban pages
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.Secret: ${OIDC_SECRET:?UNSET_OIDC_SECRET_ERROR} # OIDC client secret
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.Provider.ClientID: ${OIDC_CLIENT_ID:?UNSET_OIDC_CLIENT_ID_ERROR} # OIDC Client ID
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.Provider.ClientSecret: ${OIDC_CLIENT_SECRET:?UNSET_OIDC_CLIENT_SECRET_ERROR} # OIDC Client Secret
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.Provider.Url: ${OIDC_ISSUER_URL:?UNSET_OIDC_ISSUER_URL_ERROR} # OIDC Issuer URL
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.Provider.UsePKCE: true # Use PKCE
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.Scopes: openid,email,profile # OIDC Scopes
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.CallbackUri: https://${PRIVATE_HOST:?UNSET_PRIVATE_HOST_ERROR}/oidc/callback # OIDC Callback URL
      traefik.http.middlewares.oidc.plugin.traefik-oidc-auth.SessionCookie.Domain: "*.robigan.com"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mount the docker socket so that traefik can monitor it
      - acme:/acme # Directory for auto generated certificates
      - ${CAPTCHA_TEMPLATE:-/home/main/crowdsec-bouncer-traefik-plugin/captcha.html}:/captcha.html:ro # Mount the captcha.html file for crowdsec
      - ${BAN_TEMPLATE:-/home/main/crowdsec-bouncer-traefik-plugin/ban.html}:/ban.html:ro # Mount the ban.html file for crowdsec
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_TOKEN:?UNSET_CF_DNS_TOKEN_ERROR}
    extra_hosts:
      - "host.docker.internal:host-gateway" # Add host.docker.internal to the container's hosts file, so that it can access the host's network

  cache: # Redis cache for crowdsec
    image: redis:8-alpine
    restart: unless-stopped
    expose:
      - 6379
    command: redis-server --save 60 1 --loglevel warning # Write to disk every 60s, if 1 key changed. If container is stopped but pulled back up, it will have the same state as before
    networks:
      - default
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3

networks:
  proxy: # Connect to proxy network
    # NOTE: Proxy network is external. When setting it up, it should always be internal, so not routable to the internet
    external: true
    name: proxy

volumes:
  acme: # Volume to store automatically generated certificates
